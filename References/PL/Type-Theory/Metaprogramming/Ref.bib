@article{10.1145/3607851,
author = {Xie, Ningning and White, Leo and Nicole, Olivier and Yallop, Jeremy},
title = {MacoCaml: Staging Composable and Compilable Macros},
year = {2023},
issue_date = {August 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {ICFP},
url = {https://doi.org/10.1145/3607851},
doi = {10.1145/3607851},
abstract = {We introduce MacoCaml, a new design and implementation of compile-time code generation for the OCaml language. MacoCaml features a novel combination of macros with phase separation and quotation-based staging, where macros are considered as compile-time bindings, expression cross evaluation phases using staging annotations, and compile-time evaluation happens inside top-level splices. We provide a theoretical foundation for MacoCaml by formalizing a typed source calculus maco that supports interleaving typing and compile-time code generation, references with explicit compile-time heaps, and modules. We study various crucial properties including soundness and phase distinction. We have implemented MacoCaml in the OCaml compiler, and ported two substantial existing libraries to validate our implementation.},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {209},
numpages = {45},
keywords = {Compile-time code generation, Macros, OCaml, Staging}
}

@article{10.1145/3674649,
author = {Chiang, Tsung-Ju and Yallop, Jeremy and White, Leo and Xie, Ningning},
title = {Staged Compilation with Module Functors},
year = {2024},
issue_date = {August 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {ICFP},
url = {https://doi.org/10.1145/3674649},
doi = {10.1145/3674649},
abstract = {Multi-stage programming has been used in a wide variety of domains to  eliminate the tension between abstraction and performance. However, the  interaction of multi-stage programming features with features for  programming-in-the-large remains understudied, hindering the full integration  of multi-stage programming support into existing languages, and limiting the  effective use of staging in large programs.    We take steps to remedy the situation by studying the extension of MacoCaml, a  recent OCaml extension that supports compile-time code generation via  macros and quotations, with module functors, the key mechanism  in OCaml for assembling program components into larger units. We discuss design  choices related to evaluation order, formalize our calculus via elaboration, and  show that the design enjoys key metatheoretical properties: syntactic type  soundness, elaboration soundness, and phase distinction. We believe that this  study lays a foundation for the continued exploration and implementation of the  OCaml macro system.},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {260},
numpages = {35},
keywords = {Compile-time code generation, Macros, Modules, OCaml, Staging}
}

