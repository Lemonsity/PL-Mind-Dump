@article{10.1016/j.entcs.2004.08.008,
author = {Plotkin, Gordon and Power, John},
title = {Computational Effects and Operations: An Overview},
year = {2004},
issue_date = {October, 2004},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {73},
issn = {1571-0661},
url = {https://doi.org/10.1016/j.entcs.2004.08.008},
doi = {10.1016/j.entcs.2004.08.008},
journal = {Electron. Notes Theor. Comput. Sci.},
month = {oct},
pages = {149–163},
numpages = {15}
}

@article{plotkin_handling_2013,
        title = {Handling {Algebraic} {Effects}},
        volume = {Volume 9, Issue 4},
        issn = {1860-5974},
        url = {https://lmcs.episciences.org/705},
        doi = {10.2168/LMCS-9(4:23)2013},
        abstract = {Algebraic effects are computational effects that can be represented by an equational theory whose operations produce the effects at hand. The free model of this theory induces the expected computational monad for the corresponding effect. Algebraic effects include exceptions, state, nondeterminism, interactive input/output, and time, and their combinations. Exception handling, however, has so far received no algebraic treatment. We present such a treatment, in which each handler yields a model of the theory for exceptions, and each handling construct yields the homomorphism induced by the universal property of the free model. We further generalise exception handlers to arbitrary algebraic effects. The resulting programming construct includes many previously unrelated examples from both theory and practice, including relabelling and restriction in Milner's CCS, timeout, rollback, and stream redirection.},
        urldate = {2024-08-13},
        journal = {Logical Methods in Computer Science},
        author = {Plotkin, Gordon D. and Pretnar, Matija},
        month = dec,
        year = {2013},
        note = {Publisher: Episciences.org},
        file = {Full Text PDF:/home/lemon/Zotero/storage/BAHZIMTY/Plotkin and Pretnar - 2013 - Handling Algebraic Effects.pdf:application/pdf},
}

@article{10.1145/3428194,
author = {Brachth\"{a}user, Jonathan Immanuel and Schuster, Philipp and Ostermann, Klaus},
title = {Effects as capabilities: effect handlers and lightweight effect polymorphism},
year = {2020},
issue_date = {November 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {OOPSLA},
url = {https://doi.org/10.1145/3428194},
doi = {10.1145/3428194},
abstract = {Effect handlers have recently gained popularity amongst programming language researchers. Existing type- and effect systems for effect handlers are often complicated and potentially hinder a wide-spread adoption.  We present the language Effekt with the goal to close the gap between research languages with effect handlers and languages for working programmers. The design of Effekt revolves around a different view of effects and effect types. Traditionally, effect types express which side effects a computation might have. In Effekt, effect types express which capabilities a computation requires from its context. While this new point in the design space of effect systems impedes reasoning about purity, we demonstrate that it simplifies the treatment of effect polymorphism and the related issues of effect parametricity and effect encapsulation. To guarantee effect safety, we separate functions from values and treat all functions as second-class. We define the semantics of Effekt as a translation to System Xi, a calculus in explicit capability-passing style.},
journal = {Proc. ACM Program. Lang.},
month = {nov},
articleno = {126},
numpages = {30},
keywords = {algebraic effects, effect handlers, effect polymorphism}
}

@article{10.1145/3674641,
author = {Yoshioka, Takuma and Sekiyama, Taro and Igarashi, Atsushi},
title = {Abstracting Effect Systems for Algebraic Effect Handlers},
year = {2024},
issue_date = {August 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {ICFP},
url = {https://doi.org/10.1145/3674641},
doi = {10.1145/3674641},
abstract = {Many effect systems for algebraic effect handlers are designed to guarantee that all invoked effects are handled adequately. However, respective researchers have developed their own effect systems that differ in how to represent the collections of effects that may happen. This situation results in blurring what is required for the representation and manipulation of effect collections in a safe effect system.    In this work, we present a language λEA equipped with an effect system that abstracts the existing effect systems for algebraic effect handlers. The effect system of λEA is parameterized over effect algebras, which abstract the representation and manipulation of effect collections in safe effect systems. We prove the type-and-effect safety of λEA by assuming that a given effect algebra meets certain properties called safety conditions. As a result, we can obtain the safety properties of a concrete effect system by proving that an effect algebra corresponding to the concrete system meets the safety conditions. We also show that effect algebras meeting the safety conditions are expressive enough to accommodate some existing effect systems, each of which represents effect collections in a different style. Our framework can also differentiate the safety aspects of the effect collections of the existing effect systems. To this end, we extend λEA and the safety conditions to lift coercions and type-erasure semantics, propose other effect algebras including ones for which no effect system has been studied in the literature, and compare which effect algebra is safe and which is not for the extensions.},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {252},
numpages = {30},
keywords = {algebraic effects and handlers, effect algebras, type-and-effect systems}
}

@article{PRETNAR201519,
title = {An Introduction to Algebraic Effects and Handlers. Invited tutorial paper},
journal = {Electronic Notes in Theoretical Computer Science},
volume = {319},
pages = {19-35},
year = {2015},
note = {The 31st Conference on the Mathematical Foundations of Programming Semantics (MFPS XXXI).},
issn = {1571-0661},
doi = {https://doi.org/10.1016/j.entcs.2015.12.003},
url = {https://www.sciencedirect.com/science/article/pii/S1571066115000705},
author = {Matija Pretnar},
keywords = {algebraic effects, handlers, effect system, semantics, logic, tutorial},
abstract = {This paper is a tutorial on algebraic effects and handlers. In it, we explain what algebraic effects are, give ample examples to explain how handlers work, define an operational semantics and a type & effect system, show how one can reason about effects, and give pointers for further reading.}
}

@article{Modal-Effect-Types-Tang-White
title = {Modal Effect Types},
url = {https://homepages.inf.ed.ac.uk/slindley/papers/modal-effects-draft-july2024.pdf}
}

@techreport{leijen2013koka,
author = {Leijen, Daan},
title = {Koka: Programming with Row-Polymorphic Effect Types},
institution = {Microsoft},
year = {2013},
month = {August},
abstract = {Note: This is an updated article: a previous version of this article contained a wrong lemma and corresponding mistakes in various proofs of Section 5.

We propose a programming model where effects are treated in a disciplined way, and where the potential side-effects of a function are apparent in its type signature. The type and effect of expressions can also be inferred automatically, and we describe a polymorphic type inference system based on Hindley-Milner style inference. A novel feature is that we support polymorphic effects through row-polymorphism using duplicate labels. Moreover, we show that our effects are not just syntactic labels but have a deep semantic connection to the program. For example, if an expression can be typed without an exn effect, then it will never throw an unhandled exception. Similar to Haskell's `runST` we show how we can safely encapsulate stateful operations. Through the state effect, we can also safely combine state with let- polymorphism without needing either imperative type variables or a syntactic value restriction. Finally,our system is implemented fully in a new language called Koka and has been used successfully on various small to medium- sized sample programs ranging from a Markdown processor to a tier-splitted chat application.},
url = {https://www.microsoft.com/en-us/research/publication/koka-programming-with-row-polymorphic-effect-types/},
number = {MSR-TR-2013-79},
}

@article{10.1145/3674656,
author = {Song, Yahui and Foo, Darius and Chin, Wei-Ngan},
title = {Specification and Verification for Unrestricted Algebraic Effects and Handling},
year = {2024},
issue_date = {August 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {ICFP},
url = {https://doi.org/10.1145/3674656},
doi = {10.1145/3674656},
abstract = {Programming with user-defined effects and effect handlers has many practical use cases involving imperative effects. Additionally, it is natural and powerful to use multi-shot effect handlers for non-deterministic or probabilistic programs that allow backtracking to compute a comprehensive outcome. Existing works for verifying effect handlers are restricted in one of three ways: i) permitting multi-shot continuations under pure setting; ii) allowing heap manipulation for only one-shot continuations; or iii) allowing multi-shot continuations with heap-manipulation but under a restricted frame rule.
 

 
This work proposes a novel calculus called Effectful Specification Logic (ESL) to support unrestricted effect handlers, where zero-/one-/multi-shot continuations can co-exist with imperative effects and higher-order constructs. ESL captures behaviors in stages, and provides precise models to support invoked effects, handlers and continuations. To show its feasibility, we prototype an automated verification system for this novel specification logic, prove its soundness, report on useful case studies, and present experimental results. With this proposal, we have provided an extended specification logic that is capable of modeling arbitrary imperative higher-order programs with algebraic effects and continuation-enabled handlers.},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {267},
numpages = {29},
keywords = {Automated Verification, Effectful Specification Logic, Multi-shot Continuations, Separation Logic}
}

@inproceedings{10.1145/2633628.2633636,
author = {Lindley, Sam},
title = {Algebraic effects and effect handlers for idioms and arrows},
year = {2014},
isbn = {9781450330428},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.myaccess.library.utoronto.ca/10.1145/2633628.2633636},
doi = {10.1145/2633628.2633636},
abstract = {Plotkin and Power's algebraic effects combined with Plotkin and Pretnar's effect handlers provide a foundation for modular programming with effects. We present a generalisation of algebraic effects and effect handlers to support other kinds of effectful computations corresponding to McBride and Paterson's idioms and Hughes' arrows.},
booktitle = {Proceedings of the 10th ACM SIGPLAN Workshop on Generic Programming},
pages = {47–58},
numpages = {12},
keywords = {algebraic effects, applicative functors, arrows, call-by-push-value, effect handlers, idioms, monads},
location = {Gothenburg, Sweden},
series = {WGP '14}
}